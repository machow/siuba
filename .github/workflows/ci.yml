name: CI

on:
  workflow_dispatch:
  push:
    branches: ['main', 'dev-*']
  pull_request:
  release:
    types: [published]

jobs:
  checks:
    name: "Checks"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        # unset doctests for earlier versions of python.
        pytest_flags: ["-v -o addopts='' -m 'not bigquery and not snowflake'"]
        requirements: [""]
        include:
          # historical requirements
          - name: "2021-mid dependencies"
            python-version: 3.8
            requirements: numpy~=1.19.1 pandas~=1.2.0 SQLAlchemy~=1.4.13 psycopg2~=2.8.5 PyMySQL==1.0.2
            pytest_flags: "-o addopts='' -m 'not bigquery and not snowflake'"
          - name: "2022-early dependencies"
            python-version: 3.8
            requirements: numpy~=1.22.0 pandas~=1.3.5 SQLAlchemy~=1.4.29 psycopg2-binary~=2.9.3 PyMySQL==1.0.2
          - name: "2022-early dependencies"
            python-version: "3.10"
            requirements: numpy~=1.22.0 pandas~=1.3.5 SQLAlchemy~=1.4.29 psycopg2-binary~=2.9.3 PyMySQL==1.0.2
            latest: true

    steps:
      - uses: actions/checkout@v2
      - name: Run docker-compose
        run: |
          docker-compose up --build -d
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -n "$REQUIREMENTS" ]; then
            python -m pip install $REQUIREMENTS '.[test,docs]'
          else
            python -m pip install '.[test,docs]'
          fi
          # step to test duckdb
          # TODO: move these requirements into the test matrix
          pip install duckdb_engine
        env:
          REQUIREMENTS: ${{ matrix.requirements }}
      - name: Test with pytest
        run: |
          make test-travis
        env:
          SB_TEST_PGPORT: 5433
          PYTEST_FLAGS: ${{ matrix.pytest_flags }}

  test-bigquery:
    name: "Test BigQuery"
    runs-on: ubuntu-latest
    if: ${{ contains('bigquery', github.ref) || !github.event.pull_request.draft }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-test.txt
          python -m pip install pytest-parallel
          python -m pip install sqlalchemy-bigquery==1.4 pandas-gbq==0.17
          python -m pip install .
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: siuba-tests
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Test with pytest
        run: |
          # tests are mostly waiting on http requests to bigquery api
          # note that test backends can cache data, so more processes
          # is not always faster
          pytest siuba -m bigquery --workers 2 --tests-per-worker 20
        env:
          SB_TEST_BQDATABASE: "ci_github"

  test-snowflake:
    name: "Test snowflake"
    runs-on: ubuntu-latest
    if: ${{ contains('snowflake', github.ref) || !github.event.pull_request.draft }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-test.txt
          python -m pip install pytest-parallel
          python -m pip install snowflake-sqlalchemy
          python -m pip install .
      - name: Test with pytest
        run: |
          pytest siuba -m snowflake --workers 2 --tests-per-worker 20
        env:
          SB_TEST_SNOWFLAKEPASSWORD: ${{ secrets.SB_TEST_SNOWFLAKEPASSWORD }}
          SB_TEST_SNOWFLAKEHOST: ${{ secrets.SB_TEST_SNOWFLAKEHOST }}

  build-docs:
    name: "Build Documentation"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || contains(github.ref, 'docs')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
          python -m pip install .
      - uses: r-lib/actions/setup-pandoc@v1
        with:
          pandoc-version: '2.17.0.1'
      - name: Make docs
        run: |
          make docs-build

  deploy:
    name: "Deploy to PyPI"
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [checks, test-bigquery, test-snowflake]
    steps:
      - uses: actions/checkout@v2
      - name: "Set up Python 3.8"
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: "Build Package"
        run: |
          pip install wheel
          python setup.py build sdist bdist_wheel

      # test deploy ----
      - name: "Test Deploy to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.event.release.name, 'TEST')
        with:
          user: __token__
          password: ${{ secrets.PYPI_TEST_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      # prod deploy ----
      - name: "Deploy to PyPI"
        uses: pypa/gh-action-pypi-publish@master
        if: "!startsWith(github.event.release.name, 'TEST')"
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
